C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 21:09:51 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\ARM_KEIL\Arm\Keil_v5\C51\BIN\C51.EXE source\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /* main.c */
   2          #include "include/18B20.h"
   3          #include "include/ComCDT.h"
   4          #include "include/Relay.h"
   5          #include "include/buzzer.h"
   6          #include "include/pid_controller.h"
   7          #include "include/IKeyEvent.h"
   8          #include "include/serial.h"
   9          #include <stdio.h>
  10          
  11          
  12          // 定义常量
  13          #define TIMER_0_RELOADS_VALUE 1000    // 定时器0重装值，为每1ms
  14          #define TEMP_CONVERSION_FACTOR 0.0625 // 温度转换系数
  15          #define LOWER_TEMP_LIMIT 25           // 温度下限
  16          #define UPPER_TEMP_LIMIT 30           // 温度上限
  17          #define TARGET_TEMPERATURE 28         // 目标温度
  18          
  19          // 任务调度器的任务结构体
  20          typedef struct
  21          {
  22              void (*taskFunction)(void); // 任务函数指针
  23              unsigned int period;        // 任务执行的周期
  24              unsigned int nextExecution; // 任务下次执行的时间
  25          } Task;
  26          
  27          #define MAX_TASKS 5
  28          Task tasks[MAX_TASKS];       // 任务列表
  29          unsigned char taskCount = 0; // 任务数量
  30          
  31          // 调度器函数声明
  32          void initializeSystem();
  33          void addTask(void (*taskFunction)(void), unsigned int period);
  34          void scheduler();
  35          
  36          // 任务函数声明
  37          void taskTemperatureUpdate();
  38          void taskControlRelay();
  39          void taskSendTemperature();
  40          
  41          // 定时器函数声明
  42          void initializeTimer0();
  43          void timer0InterruptHandling(void);
  44          
  45          // 全局变量声明
  46          unsigned int currentTime = 0;                   // 当前时间，以1ms为单位
  47          unsigned char temperature = 0;                  // 当前温度
  48          unsigned char integerPart = 0, decimalPart = 0; // 温度的整数部分和小数部分
  49          unsigned char setpoint = TARGET_TEMPERATURE;    // 目标温度
  50          unsigned char integral = 0;                     // PID积分项
  51          unsigned char previous_error = 0;               // 上一个误差
  52          bit displayTemperatureOrTime = 1;               // 控制温度/时间显示切换
  53          
  54          
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 21:09:51 PAGE 2   

  55          void main(void)
  56          {
  57   1          // 初始化DS18B20温度传感器模块
  58   1          Init_DS18B20();
  59   1      
  60   1          // 初始化串口
  61   1          initSerial(); // 初始化串口函数
  62   1      
  63   1          // 初始化调度器和任务
  64   1          initializeSystem();
  65   1      
  66   1          // 无限循环
  67   1          while (1)
  68   1          {
  69   2              // 扫描按键事件
  70   2              checkButtons();
  71   2      
  72   2              // 调用调度器处理任务
  73   2              scheduler();
  74   2          }
  75   1      }
  76          
  77          // 初始化系统
  78          void initializeSystem()
  79          {
  80   1          // 初始化定时器0
  81   1          initializeTimer0();
  82   1      
  83   1          // 添加任务到调度器
  84   1          addTask(taskTemperatureUpdate, 8); // 每8毫秒更新一次温度显示
  85   1          addTask(taskControlRelay, 1000);      // 每1秒控制一次继电器
  86   1          addTask(taskSendTemperature, 500);    // 每0.5毫秒发送一次温度信息
  87   1      }
  88          
  89          // 初始化定时器0
  90          void initializeTimer0()
  91          {
  92   1          // 设置定时器0为模式1（16位定时器/计数器模式）
  93   1          TMOD &= 0xF0; // 清除定时器0的模式位
  94   1          TMOD |= 0x01; // 设置定时器0为模式1（16位定时器）
  95   1      
  96   1          // 初始化定时器0的初值
  97   1          TH0 = (65536 - TIMER_0_RELOADS_VALUE) / 256;
  98   1          TL0 = (65536 - TIMER_0_RELOADS_VALUE) % 256;
  99   1      
 100   1          // 开启全局中断和定时器0中断
 101   1          EA = 1;
 102   1          ET0 = 1;
 103   1      
 104   1          // 启动定时器0
 105   1          TR0 = 1;
 106   1      }
 107          
 108          // 定时器0中断处理函数
 109          void timer0InterruptHandling(void) interrupt 1
 110          {
 111   1          // 重新装载定时器0的初值
 112   1          TH0 = (65536 - TIMER_0_RELOADS_VALUE) / 256;
 113   1          TL0 = (65536 - TIMER_0_RELOADS_VALUE) % 256;
 114   1      
 115   1          // 更新当前时间，每次中断表示1ms
 116   1          currentTime++;
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 21:09:51 PAGE 3   

 117   1      }
 118          
 119          // 添加任务
 120          void addTask(void (*taskFunction)(void), unsigned int period)
 121          {
 122   1          if (taskCount < MAX_TASKS)
 123   1          {
 124   2              tasks[taskCount].taskFunction = taskFunction;
 125   2              tasks[taskCount].period = period;
 126   2              tasks[taskCount].nextExecution = currentTime + period;
 127   2              taskCount++;
 128   2          }
 129   1      }
 130          
 131          // 温度更新任务
 132          void taskTemperatureUpdate()
 133          {
 134   1          // 读取温度并转换为实际温度值
 135   1          temperature = ReadTemperature() * TEMP_CONVERSION_FACTOR;
 136   1      
 137   1          // 计算温度的整数部分和小数部分
 138   1          integerPart = (unsigned int)temperature;
 139   1          decimalPart = (unsigned int)((temperature - integerPart) * 100 + 0.5);
 140   1      
 141   1          // 根据显示模式，显示温度或时间
 142   1          if (displayTemperatureOrTime == 1)
 143   1          {
 144   2              displayTemperature(integerPart, decimalPart);
 145   2          }
 146   1          else
 147   1          {
 148   2              displayTime(60); // 示例：显示60分钟
 149   2          }
 150   1      }
 151          
 152          // 继电器控制任务
 153          void taskControlRelay()
 154          {
 155   1          // 控制逻辑：低于下限温度打开继电器并蜂鸣，超过上限关闭继电器并蜂鸣
 156   1          if (temperature < LOWER_TEMP_LIMIT)
 157   1          {
 158   2              relayOpened();
 159   2              buzzerOn();
 160   2          }
 161   1          else if (temperature > UPPER_TEMP_LIMIT)
 162   1          {
 163   2              relayClosed();
 164   2              buzzerOn();
 165   2          }
 166   1          else
 167   1          {
 168   2              // 使用PID控制温度在目标范围内
 169   2              pIDControl();
 170   2              buzzerOff();
 171   2          }
 172   1      }
 173          
 174          // 调度器：检查并执行每个任务
 175          void scheduler()
 176          {
 177   1          unsigned char i;
 178   1          for (i = 0; i < taskCount; i++)
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 21:09:51 PAGE 4   

 179   1          {
 180   2              if (currentTime >= tasks[i].nextExecution)
 181   2              {
 182   3                  tasks[i].taskFunction();                                // 执行任务
 183   3                  tasks[i].nextExecution = currentTime + tasks[i].period; // 更新下次执行时间
 184   3              }
 185   2          }
 186   1      }
 187          
 188          // 发送温度任务
 189          void taskSendTemperature()
 190          {
 191   1          char buffer[20];
 192   1          sprintf(buffer, "Temperature: %d.%02d\n", integerPart, decimalPart);
 193   1          sendSerial(buffer); // 发送温度信息
 194   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    400    ----
   CONSTANT SIZE    =     22    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     44      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
